= Concurrency and Locking

== Concurrency

=== Overview

 * Two or more instance of a same method executed on same time
   constitutes to concurrency.

 * A method is suspended in-between by pre-emption and 
    - another instance of the same is invoked,
    - if they could run without descrepancy, 
    - its also concurrency.

=== Sources of Concurrency

  * `SMP` - two or more processors can be executing kernel code at the
    same time.

  * `Sleeping` - kernel code in process context can give up the
    processor by invoking the scheduler, and another process could
    start executing.

  * `Pre-emption` - kernel code in process context can be pre-empted by
    the scheduler and another process could be executed.

  * `Interrupts` - interrupts can occur at anytime causing the current
    code to be pre-empted and the interrupt handler to be executed.

== Multiprocessing Models

=== SMP vs UP

* *UP - Uni Processor*
  - only single core, scope for concurrency is just pre-emption and
    interrupts

* *SMP - Symmetric Multiprocessor*
  - A system with multiple CPUs of same architecture
  - Single kernel spans across the CPUs 
  - same code can run simultaneously on two cores.

=== SMP Issues

* A kernel driver code or function can run simultaneously on two
  different cores.

* Which may be potentially a problem, if it is not taken care
  properly.

=== Types of Concurrency

 * Concurrency due to multiple CPU is called `true concurrency`, can
   considered as parallellism.

 * Concurrency due to interleaving of execution is called
   `pseudo-concurrency`.

  * Concurrency due to *sleeping*, *pre-emption* and *interrupts*
    comes under pseudo-concurrency.

== Descrepancies of Concurrency

=== Critical Region and Race Conditions

Critical Region:: 

* Code path that accesses a shared global data.

Race Condition::

* When multiple threads are in the critical region that access the same
  global data, we have a race condition. 

* It is called a race condition because the result depends on the
  order of execution of the threads, rather than the instructions in a
  single thread.

=== No race, with luck

`------------------`----------------------
Process A           Process B
------------------------------------------
fetch i (7)        
increment i (8)
writeback i (8)
-		   fetch i (8)
-		   increment i (9)
-		   writeback i (9)
------------------------------------------

=== SMP Race

`------------------`----------------------
Process A           Process B
------------------------------------------
fetch i (7)        fetch i (7)
increment i (8)    increment i (8)
writeback i (8)    writeback i (8)
------------------------------------------

=== Pre-emption Race

`------------------`----------------------
Process A           Process B
------------------------------------------
fetch i (7)        
increment i (8)    
-		   fetch i (7)
-		   increment i (8)
-		   writeback i (8)
writeback i (8)    
------------------------------------------

== Synchronization

=== Avoiding Concurrency Issues

  * Write callbacks as re-entrant codes

  * at instances, may need to disable pre-emption

  * at instances, may need to disable interrupts

  * by mutual exclusion

=== Mutual Exclusion

* When one process is accessing a shared data, other process has to be
  excluded from accesing the shared data.

* This is achieved by locking mechanism,
  - who ever accesses the shared data, checks and acquires a lock,

  - other process if finds lock acquired by other waits until the lock
    is released.

=== Lock Scenarios

* *Short term locks*
  - execution time is less between acquiring and releasing a lock

  - can be a busyloop lock, since lock-in or waiting period is less.

* *Long term locks*
  - execution or waiting period is long.

  - should be using an yielding lock, as CPU can be given to other
    process

=== Mutex for Serialization

  * Mutex is an yielding lock

  * When the lock is not available, it puts the process to sleep.
  
  * Can be used to protect a shared data between process contexts.
  
  * Cannot be used in interrupt context because it sleeps if lock is
    not available.

=== Locking with Mutex (SMP case)

`------------------`----------------------
Process A Context   Process B Context
------------------------------------------
mutex_lock	   mutex_lock sleeps
fetch i (7)            -
increment i (8)        -
writeback i (8)        -
mutex_unlock
     -		   woken up
     -		   mutex_lock
     -		   fetch i (8)
     -		   increment i (9)
     -		   writeback i (9)
     -		   mutex_unlock
------------------------------------------

=== Locking with Mutex (Pre-emption case)

`------------------`----------------------
Process A Context   Process B Context
------------------------------------------
mutex_lock
fetch i (7)        
increment i (8)    
      -		   mutex_lock sleeps
writeback i (8)	        -
mutex_unlock	        -
      -		   woken up
      -		   mutex_lock
      -		   fetch i (8)
      -		   increment i (9)
      -		   writeback i (9)
      -		   mutex_unlock
------------------------------------------

== Using Mutex

=== Initializing Mutex

  * Defining a mutex and initializing it.

[source,c]
------
struct mutex mylock;

DEFINE_MUTEX(mylock);
------

  * Initializing a mutex at run time.

------
void mutex_init(struct mutex *lock);
------

=== Acquiring and Releasing the lock.

[source,c]
------
void mutex_lock(struct mutex *lock);

void mutex_unlock(struct mutex *lock);
------

=== When a Race Condition Occur in Driver

* if bottom halves and interrupt handler accessing same shared data

* if two character driver callbacks accessing the same shared data.

* if two processess or threads accesses the same driver
  simultaneously.

=== I2C Key Headers

[source,c]
----
include::code/ikey-mutex/ikey-mutex.def[]
----

=== I2C Key BH

[source,c]
----
include::code/ikey-mutex/ikey-mutex.bh[]
----

=== I2C Key Read

[source,c]
----
include::code/ikey-mutex/ikey-mutex.read[]
----

=== Spin Locks

  * Spinlocks are busy looping locks

  * When lock is available, `disables process pre-emption` in
    uni-processor systems, and sets a lock flag.

  * When lock is not available, runs a `tight loop checking` the flag.

  * Can be used to protect a shared data between process contexts, if
    lock-in period is less.

  * A variant of spin lock can also disable interrupts before
    acquiring the lock.

=== Advantages of Spinlocks

  * Can be used to protect a shared data between interrupt contexts.

  * Can also be used to protect a shared data between 
    - process context and interrupt context 
    - between interrupt contexts.

  * Disabling interrupts only disables interrupts in the current
    processor, so interrupts can still occur in another processor.

  * Much faster than mutexes, since it does not put a process to
    sleep.

== Using Spinlock

=== Initializing Spinlock

  * Defining a spin lock and initializing it.

[source,c]
------
spinlock_t mylock;

spinlock_t mylock = SPIN_LOCK_UNLOCKED;
------

  * Initializing a spin lock at run time.

------
spin_lock_init(spinlock_t *mylock);
------

=== Acquiring Spinlock

  * Acquiring and releasing the lock.

------
void spin_lock(spinlock_t *lock);

void spin_unlock(spinlock_t *lock);
------

=== Spinlocks with Interrupts Disabled

  * Acquiring the lock and disabling interrupts.

------
void spin_lock_irqsave(spinlock_t *lock, unsigned long flags);
------

  * Releasing lock and restoring interrupt state.

------
void spin_lock_irqrestore(spinlock_t *lock, unsigned long flags);
------

  * Code that runs with a spin lock acquired should not sleep or there
    is a possibility of dead locking.

=== What to Lock?

  * Always lock data, not the code.

  * For each shared data, make sure there is lock to protect its
    access.

=== Choosing a Locking Scheme

  * Between two `process context`
    - spin_lock, if it is short and does not sleep.
    - mutex, if it sleeps.

  * Between `process context` and `interrupt context`
    - spin_lock_irqsave

  * Between two `interrupts`
    - spin_lock_irqsave

=== Choosing a Locking Scheme Flowchart

image::figures/choose-lock.png["Choosing a Locking Scheme",width=1024,align="center"]

== Explore It Yourself

== Deadlocks

=== Deadlocks

  * Deadlock refers to a specific condition when two or more processes
    are each waiting for another to release a resource

  * Impact of Deadlock 
    - Mutex - sleep for ever
    - Spinlock - spin for ever

=== Deadlocking by sleeping

`------------------`----------------------
Context A           Context B
------------------------------------------
spin_lock_irq	   -
sleep		   spin_lock_irq busy loops
sleep		   XX Dead Lock XX
XX Dead Lock XX 
------------------------------------------

=== Deadly Embrace

.Deadly Embrace, ABBA Deadlock
`------------------`----------------------
Context A           Context B
------------------------------------------
lock A		   lock B
lock B Sleep	   lock A Sleep
XX Dead Lock XX	   XX Dead Lock XX
------------------------------------------

=== Double Acquire Deadlock 
- can happen when a function calls another
    function that acquires the same lock. 

.Double Acquire
`------------------`----------------------
Context A          Context B
------------------------------------------
lock A		   lock B
Func()	   	   lock A Sleep
  - lock(A)	   XX Dead Lock XX
------------------------------------------

/////
=== Disabling Interrupts 

* By disabling interrupts appropriately the concurrency related issues
  can be solved.

[source,c]
------
void disable_irq(unsigned int irq);
void enable_irq(unsigned int irq);
void local_irq_disable();
void local_irq_enable();
void local_irq_save();
void local_irq_restore();
------

.Local and System Interrupt Disable
image::figures/irq.png["Local and System Interrupt Disable",width=432]

  * Disabling of interrupts during interrupt handler execution.
////

=== References

* https://www.slideshare.net/hemanthvenkatesh33/driver-parallelism

* https://stackoverflow.com/questions/2559602/spin-lock-irqsave-vs-spin-lock-irq