= Linux GPIO
Zilogic Systems

== Circuit Symbols

=== Circuit Schematic

image::figures/circuit-1.png[width="50%",align="center"]

=== Circuit Schematic (Contd.)

image::figures/circuit-2.png[width="15%",align="center"]

== Sensors with Binary Output

[role="two-column"]
=== PIR Sensor

[role="left"]
image::figures/pir.jpg[]

[role="right"]
  * PIR Sensor: **P**assive **I**nfra**r**ed Sensor

  * Detects presence of humans by measuring radiated infrared light

[role="two-column"]
=== Reed Switch

[role="left"]
image::figures/reed-switch.jpg[]

[role="right"]
   * Reed switch, detects the presence of a magnet

   * When a magnet comes closer to the switch the switch
     closes

   * Can be used as a door sensor

[role="two-column"]
=== Gas Detector

[role="left"]
image::figures/smoke-sensor.jpg[]

[role="right"]
  * Gas sensors, detects the presence of
    - Smoke
    - Alcohol
    - Carbon Monoxide

=== Simplified Digital Sensor Model

  * Sensor measures a parameter and outputs `1` or `0`
    - Indicates `1`, by connecting output to VCC
    - Indicates `0`, by connecting output to GND

image::figures/sensor-model.png[width="50%",align="center"]

== Binary Control

[role="two-column"]
=== Relay

[role="left"]
image::figures/relay.jpg[]

[role="right"]
  * Electrically controlled switch

  * 230V AC appliance can be turned on / off based on input

[role="two-column"]
=== Solenoid Valve

[role="left"]
image::figures/solenoid-valve.jpg[]

[role="right"]
  * Electrically controlled valve

  * Flow can switched on / off based on input

== GPIO

[role="two-column"]
=== GPIO Controller

[role="left"]
* GPIO controller is the hardware which provides register interface
  using which the pin status can be accessed.

* GPIO controller resides in the memory bus of the SOC.

[role="right"]
image::figures/gpio-arm.png[]

=== GPIO Direction

 * It can operate in both the directions, as an `input` to sample the
   logic level or as an `output` to drive any logic level

 * Their direction as input or output can be chosen.

 * The pin status can be read or modified from software.

=== GPIO Ports and Pins

 * The GPIO controllers are also called GPIO ports.

 * A GPIO ports, controls a set of GPIO pins

 * GPIOs pins are referred as, particular pin in a particular port
 
 * Example: P2_3 - pin 3 in port 2

=== Linux GPIO Numbering

 * Vybrid VF510 has 6 GPIO ports, Port 0 - Port 5

 * Each port controls 32 pins

 * Pins are numbered sequentially

   - Port 0, Pin Numbers: 0 - 31
   - Port 1, Pin Numbers: 32 - 63
   - Port 2, Pin Numbers: 64 - 95
   - ...

=== GPIO Usage in ZKit-ARM-VF51

[options="header"]
|====================================
| Device | Port Pin | Pin Sequence No
| RLED   | P2_6     | GPIO70
| BLED   | P2_0     | GPIO64
| GLED   | P2_1     | GPIO65
| KEY1   | P2_5     | GPIO69
| KEY2   | P2_3     | GPIO67
|====================================

== SYSFS GPIO

[role="two-column"]
=== GPIO Files in Sysfs

[role="left"]
* Inside `sysfs` in path `/sys/class/gpio` we have files which allows
  to monitor and control the GPIO.

* For each GPIO a folder `/sys/class/gpio/gpio<no>` is created and it
  would have below files.

* the `direction` file allows to control direction of pin and `value`
  file would allow to access the pin state.

[role="right"]
----
/sys/class/gpio/
| -- gpio<no>
     | -- value
     ` -- direction 
----

== LEDs

=== LED Circuit

image::figures/led-circuit.png[width="15%",align="center"]

=== LED Switch

image::figures/led-switch.png[width="15%",align="center"]

=== LED Control

image::figures/led-control.png[width="15%",align="center"]

=== GPIO LED Control

image::figures/led-gpio.png[width="30%",align="center"]

=== GPIO Request

* GPIOs can be used internally by other kernel subsystems

* GPIO has to be made available to user, by the kernel, before they
  can be used

* If GPIO is used by kernel, this will fail

----
$ echo 65 > /sys/class/gpio/export
----

* You would find `/sys/class/gpio/gpio65` available, if no other
  peripheral subsystem has not reserved it.

* A GPIO pin can be freed as shown below

----
$ echo 65 > /sys/class/gpio/unexport
----
 
=== GPIO Direction

* The processor pin can be configured as output pin by writing 'out'
to the GPIO direction file

----
$ echo out > /sys/class/gpio/gpio65/direction
----

* The processor pin can be configured as output pin by writing 'in' to
the GPIO direction file

----
$ echo in > /sys/class/gpio/gpio65/direction
----

=== GPIO State 

 * When value '1' or '0' written in the value file, it can drive logic
   level high or low.

----
$ echo 1 > /sys/class/gpio/gpio65/value
----

 * The value file can be read to know the state of input pin.

----
$ cat /sys/class/gpio/gpio65/value
----

=== LED Glow Program

[source,python]
----
include::code/led.py[]
----

=== GPIO Module

[source,python]
----
include::code/gpio.py[]
----

=== LED Blinky Program

The GPIO related actions are implemented as a GPIO class and it is
used in blink code 
link:{include:code/gpio.py.datauri}["gpio.py",filename="gpio.py"]

[source,python]
----
include::code/led-blink.py[]
----

=== Try Out

* Glow the tri color LED connected to GPIO64, 65 & 70 through command
  line.
 
* Modify the LED Blink Code
  link:{include:code/led-blink.py.datauri}["led-blink.py",filename="led-blink.py"]
  to change the color of led every one second.

=== Try Out Codes

* Code for LED Color change is
  link:{include:code/led-chcolor.py.datauri}["led-chcolor.py",filename="led-chcolor.py"]

== Keys

=== Key Circuit

image::figures/keys.png[width="50%",align="center"]

=== Input States

* Digital inputs can be of three states `high`, `low` or `floating`.

* If they are not connected to any signal it would be a floating input
  and said to be open.

* The `floating pins` doesn't have a fixed state and it would pick
  near by signal and would have unstable state.

[role="two-column"]
=== Default Value
[role="left"]
* The inputs lines has to be fixed to a default state by tying that
  - to *VCC* for default high state or 
  - to *GND* for default low state.

* Making a pin to stay high, by connecting it to VCC through a
  resistor is called `weak pull-up`.

* Making a pin to stay low, by connecting it to GND through a resistor
  is called `weak pull-down`.

[role="right"]
image::figures/keys-pullup.png[]

=== Code

[source,python]
----
include::code/key-debounce.py[]
----

=== Try Out

  * Modify
    link:{include:code/key-debounce.py.datauri}["key.py",filename="key.py"],
    to glow

    - Red LED, when Key 1 pressed
    - Green LED, when Key 2 pressed 

== References

=== Links

* http://slideplayer.com/slide/11129925/

* https://developer.android.com/things/hardware/hardware-101.html

== Backup Slides

[role="two-column"]
=== Introduction

[role="left"]

 * *General Purpose Input Output(GPIO)* are single pin IO, represents
   voltage signal as binary logic level `high` and `low`.

 * Typically GPIO `high` maps to voltage closer to VCC and `low` maps
   to voltage closer to ground.

 * `high` state is considered as logical `1` and low as `0`.

[role="right"]
image::figures/gpio-bistate.png[]

=== Key Debounce

* The switches or keys used are mechanical devices and when key is
  pressed or depressed they tend to vibrate creating noises until it
  settles down.

* This condition can be handled in hardware by adding a debounce
  filter.

* It can also be handled in software by waiting for specific time from
  the event occurence till it settles down.

* This delay time is typically around few hundred millisecond and
  called debounce delay.

=== Programming for Keys

[source,python]
----
include::code/key.py[]
----

=== Key Polling

* Since the key press is asynchronous, it has to be polled
  continuously or periodically.

* Continuously polling for key may burn the CPU, instead periodical
  polling should be sufficient for keys.

* Typical key stroke period by humans, couldn't be less than few
  hundred millisecs.

* it's enough that we can poll for key press once in 100 msec. 

=== Try Out Code

* The code for the tryout is 
  link:{include:code/key-status.py.datauri}["key-status.py",filename="key-status.py"]


[role="two-column"]
=== Seven Seg

[role="left"]
image::figures/segment.png[width=300]

[role="right"]
image::figures/sseg-pinmap.png[]

=== Program for Seven Segment

[source,python]
----
include::code/sseg.py[]
----

== GPIO Usage Models

=== Various GPIO Usage patterns

* Individual GPIOs for single LED, Keys, Relays, Reed switches and
  solenoid valves.

* Parallel GPIOs for 7 Segment, Stepper Motor etc.,

* Multiplexed GPIOs for Multi Seven Segment Array, Matrix Keypad etc.,

* GPIOs can be coupled with timer for periodic signalling or to create
  pulse trains of various width.

=== Bitbanging

* GPIOs as its name suggests, has countless possibility that using
  which we can build simple busses like 
  - I2C, 
  - 1 wire, 
  - SPI and 
  - even complex Memory bus

* This done using Bitbanging is a technique, which allows to simulate
  serial busses using software over GPIO.

=== Sensors and Actuators

 * Sensors - produces two values 'on' or 'off'
   - Door Sensor
   - Presence Sensor
   - Smoke Detector

 * Actuators
   - Relays: Turn ON / OFF Appliances
   - Solenoids



