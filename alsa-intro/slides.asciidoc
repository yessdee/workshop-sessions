= Introduction to ALSA

== ALSA For Linux Audio

=== History of Linux Audio

* Open Sound System(OSS) is originally the first Linux audio layer.

* It could support only few devices and single instance of playback.

* Then it started that the need for audio layer which tries to support
  several parallel playbacks.

* Scaleability of the audio framework several growing features and
  devices.

=== Need for ALSA

* Audio capture and playback needs to access multilple types of access

* Need for easier abstration over different types of Audio devices

* Need to support deterministic timing requirements to play quality
  audio.

=== Features of ALSA

* Supports audio capture, playback and full duplex operation.

* Provides mono to multi channel Audio support.

* Supports different PCM audio types and bitrates

* Extend the capability of ALSA with addition of plugins.

=== Components and Layers of ALSA 

----
   +-----------+--------+
   +  ALSA App | App    |
   +-----------+--------+

   +--------------------+
   |       ALSA API     |
   +-------------+      |
   |   Plugins   |      |
   +--------------------+
   | ALSA Drv/HW Access |
   +--------------------+         User Space

   /dev/snd/{pcm/timer/control}
 ---------------------------------------------->
                                  kernel Space
   +--------------------+
   |     ALSA Core      |
   +--------------------+

   +----------+ +--------+
   | Audio    | |  Audio | 
   |Interface | | Codec  |
   | Driver   | | Driver |
   +----------+ +--------+
       
 -----------------------------------------------
                                   Hardware
   +----------+ +--------+
   | Audio    | | Audio  |
   | Hardware | | Codec  |
   +----------+ +--------+
----


=== Types of ALSA Drivers

* PCM drivers and APIs for capture and playback of PCM samples

* Control drivers and APIs for audio control and simple mixing

* Sequence and Timer drivers for MIDI audio handling


----

+---------+ +--------+    +-------------------------+  +-----------+
| Control | | PCM    |    |  MIDI                   |  | Sequencer |
|  Mixer  | |        |    |                         |  |           |
|  App    | | Apps   |    |  Apps                   |  |   Apps    |
+---------+ +--------+    +-------------------------+  +-----------+

+---------+ +--------+    +----------+                 +-----------+
|   |Mixer| | |Plugin|    |          |                 |           |
|   +-----+ | +------+    |          |                 |           |
|         | |        |    |          |                 |           |
| Control | |  PCM   |    | Raw MIDI |                 | Sequencer |
|  APIs   | |  APIs  |    |  APIs    |                 |   APIs    |
+---------+ +--------+    +----------+                 +-----------+
 ---------------------------------------------------------------------
+---------+ +--------+    +----------+  +-----------+  +-----------+ 
| Control | |   PCM  |    | Raw Midi |  |  VirMIDI  |  | Sequencer |
+---------+ +--------+    |          |  +-----------+  |    Core   |
                          |          |  +-----------+  +-----------+
                          |          |  | Seq MIDI  |  +-----------+
	    		  +----------+  +-----------+  |   Timer   |
                                                       +-----------+

----

== Using ALSA

=== Getting ALSA Working

* Need to load the ALSA core drivers and the card drivers as snd*

----
$ lsmod | grep snd
----

* Need to have the alsa library files like alsa-lib/libasound*.so

----
$ find /usr/lib -name "*sound*.so*"
----

* Need to have alsa cards detected and their device nodes in
  /dev/snd/*

----
$ ls /dev/snd/*
----

=== ALSA Device Naming Conventions

* ALSA generally classifies it devices with string name in format

* Type: Card : Device: Subdevice

* Type denotes whether it is hardware or virtual audio device

* A single sound card can have multiple devices like analog and digital(SPDIF)

* A devices can have multiple channels which is sub devices.


=== ALSA Parameters

* To play an audio the ALSA driver has to be configured with
  parameters like channels, sample width, bitrate of audio.

* Along with that for the seemless audio playback and capture, we may
  need to handle data buffering between application and the device.

* Application would have audio samples, but the data is sent to
  devices by ALSA driver in a strict timer interval with help of timer
  interrupt.

* Application needs to prime the necessary data to the driver such
  that, the data is available to the device at exact bitrate.

* Again scheduling out of applications should not stop the audio
  playback.

=== ALSA Buffers

* Driver allocates a ring buffer to which the application's audio
  samples are pushed in.

* Period is data set which is ready for the driver to play between two
  interrupts.

* Frames are the multi-channels samples that should be given to
  device.

* Sample is the PCM value for the single channel audio.

=== ALSA Buffers Contd.

image::figures/frames-periods.png[align="center"]

=== Configuring ALSA

* The system configuration file is /etc/asound.conf, and the per-user
  configuration file is ~/.asoundrc

* Supports key value assignment to configure the ALSA framework in
  several ways.

* it takes integer and and string datatypes.

=== Assignment Syntax
----

key value
key = value
key.subkey0 = value
key {             # Compound Initialization
	subkey0 value0;
	subkey1 value1;
    }

key.0 = value0
key [ value0      # Array Type Initialization
      value1
    ]
----

=== Nesting Syntax

* Compound configuration is used for Nesting the configuration
----

master {
       slave {
       	     pcm {

	     }
       }
}

----
 
=== Playing Around ALSA

== ALSA Plugins

=== Plugins 

* Allows extending the capability of ALSA.

* They are the filters which are placed in data path between the
  application and the device.

-----

  +--------+      +----------+        +-----------+
  |  Apps  |<---->|  Plugins |<------>|  Hardware |
  +--------+      +----------+        +-----------+

-----


=== Master Slave Chain

----
 +-------------+    +---------+    +---------+
 | Application |--->|  Master |--->|  Slave  |
 +-------------+    +---------+    +---------+
 		     (Virtual      (Virtual/Real
		       device)        Device)		   
----

=== Master Slave Chain Configuration

----

master {
       type <plugin>
       slave {
       	     pcm <hw>
       }
}

----

----
slave {

}

master {
	 slave <slave name>
}
----

=== Master Slave Naming Convention

* Master
----
pcm.<name> {
}

----

* Slave

----
pcm_slave.<name> {
}
----

=== Alias Names to ALSA Devices

* If the audio devices has to be given a functional name rather than a
  hardware name.

* instead of "hw:1,0,0", if wanted to name that as `front` speaker.

* then `HW` plugin can be used.

----
 +-------------+    +---------+    +---------+
 | Application |--->|  front  |--->| hw:1,0,0|
 +-------------+    +---------+    +---------+
 		     (Virtual      (Real
		       Device)       Device)		   
----

=== HW Plugin for Alias Names

* This plugin allows application to directly access the hardware.

* Just helps in giving meaning full alias names for the devices

* Handles raw PCM and doesn't change anything to the PCM data. 

* card `0` denotes  `hw:0,0` 

=== HW Plugin Config

----
pcm.name {
	 type hw
	 card <number>	 
}
----

----
pcm.front {
	type hw
	card 0
}
----

----
$ aplay -D front test.wav 
----

=== Rate Conversion

* If the audio samples from source file is of 48KHz and if it has to
  be played on to a destination audio device whose clock is 44.1KHz,
  then it is not possible to play the audio directly.

* Then the sample rate of the source audio has to be converted to the
  end device's capable frequency.

* Rate Plugin can help on this conversion.


----
                48Khz          44.1KHz 
 +-------------+    +---------+    +---------+
 | Application |--->| Convert |--->| hw:1,0,0|
 +-------------+    +---------+    +---------+
 		     (Virtual      (Real
		       Device)       Device)		   
----

=== Rate Plugin

* This plugin allows to convert the bitrate of the PCM

* Takes rate as a parameter to defined

----
pcm_slave.front {
	    pcm "hw:0,0"
	    rate 44100   
} 

pcm.convert {
	type rate
	slave front	 
}

---- 
 

=== Channel and Encoding Conversion

In some cases we may need convert audio parameters based on limitation
on the hardware

* May be audio file is stereo but hardware supports only mono.

* Audio file has 16 bit samples but hardware supports only 8 bit
  samples.

----
                Stereo          Mono 
 +-------------+    +---------+    +---------+
 | Application |--->| Convert |--->| hw:1,0,0|
 +-------------+    +---------+    +---------+
 		     (Virtual      (Real
		       Device)       Device)		   
----

=== Plug Plugin

* It is a generic plugin which allows to convert the audio parameters
  like channel, bitrate and type for the slave stream.

----
pcm.name {
	 type plug
	 slave {
	       pcm <str>
	       format <str>
	       channels <int>
	       rate <int>
	 }
	 ttable {
	 	cchannel {
			 schannel <real>
		}
	 }
}
----
=== Transfer Table

----
ttable [
       cchannel.schannel
]
----
    
=== Dmix Plugin

* A mixer Plugin which would receive the PCM samples from different
  applications through IPC.

* It it mixes them up and writes to slave.

----
pcm.!default {
	     type plug
	     slave.pcm "dmixer"
}

pcm.dmixer  {
  	    type dmix
 	    ipc_key 1024
 	    slave {
	    	  pcm "hw:1,0"
	      	  period_time 0
	      	  period_size 1024
		  buffer_size 4096
		  rate 44100
	    }
	    bindings {
                  #CC SC 	    	     
		    0 0
		    0 1
	    }
}

----


== References

=== Links

* https://www.alsa-project.org/alsa-doc/alsa-lib/pcm_plugins.html

* https://01.org/linuxgraphics/gfx-docs/drm/sound/soc/index.html

* https://www.alsa-project.org/~tiwai/lk2k/lk2k.html

* http://www.penguinproducer.com/Blog/2011/12/history-and-clarification-of-linux-audio/

* https://blog.linuxplumbersconf.org/2009/slides/Paul-Davis-lpc2009.pdf

* https://pdfs.semanticscholar.org/presentation/0567/64499520e685333302f25128f5eed46cfbd6.pdf

* https://www.alsa-project.org/main/index.php/XRUN_Debug

* https://www.alsa-project.org/main/index.php/FramesPeriods

* http://equalarea.com/paul/alsa-audio.html