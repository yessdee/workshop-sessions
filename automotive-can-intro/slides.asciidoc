= Introduction to Automotive and CAN
Version 0.4

== Preface

=== Prologue

* This document is more an automotive jargon buster.

* Represents terms to be known for working at automotive

* Expected that audience go through the terms and get the details by
  their own.

* Most of the information are available in Wikipedia, Certain
  representational links are also added, to narrow down the audience
  to focus on the key areas.

== Automotive 

=== Automotive Devices

In a vehicle there are numerous electronic devices available in which

* Few are mandatory and others are for comfort.

* Few devices are hidden inside the body and few are visible

* Few add's up for vehicular features and some for user experience.

* Few for safety and few for luxury

* References 
  - https://en.wikipedia.org/wiki/Automotive_electronics

=== Automotive Primitive Devices

These devices are mandatory and exists in every devices.

* Electronic Control Unit (ECU)

* Electronic Instrument Cluster

=== Automotive Supplementary Devices

These devices are there to improve the comfort and driving experience

* Automotive Head Units (AHU) 

* In-Vehicle Infotainment (IVI)

* Telematics Control Unit (TCU)

* Advanced Driver Assistance System (ADAS)
  - Heads-Up Display (HUD)

=== Automotive Integrated Devices

* Integrated Cockpits

  - Is like having IVI, Clusters & ADAS together as same device.

=== Automotive Features for Future

These are upcoming features

* Autonomous Driving

* Vehicle to Vehicle (V2V)/ Vehicle to Roadside (V2R) / (V2X)

== Devices in Detail

=== Electronic Control Unit (ECU)

These are elementary devices stays invisible from outside, which
monitors and controls the electro-mechanic parts of the car. Some of
the ECU types are

 * Engine Control Module (ECM)

 * Power-train Control Module (PCM)

 * Brake Control Module (BM)

 * Transmission Control Unit (TCU)

 * Suspension Control Module (SCM)

 * Anti-lock Braking System (ABS)

 * Electronic Power Steering (EPS) 

 * Body Control Modules (BCM)

=== Instrument Cluster

This panel which stays behind the steering and gives user several
vehicular control and information 

* Major Types 
  - Digital with a LCD Panel and a Graphical HMI
  - Analogue with dials and Gauges

* It has several metrical features like 
  - Speedometer, Tachometer and Odometer
  - Fuel Gauge and Oil temperature gauge 

* Telltales (Warnings & Indicators)
  - turn
  - seat-belt warning
  - engine malfunction
  
=== Cluster Reference

  - https://www.edn.com/design/automotive/4437780/The-basics-of-automotive-cluster-device-architectures-and-applications-part-I

  - https://www.continental-automotive.com/getattachment/4aeb2376-1dea-4cd2-956d-7da5f5d71c2a/Conti_VE_Platform-Cluster_Brochure_EN_single_2016_FINAL.pdf.pdf

  - https://www.unece.org/fileadmin/DAM/trans/main/wp29/wp29wgs/wp29grsg/grsginf/81/grsg81_inf11.doc

=== In Vehicle Infotainment

Initially car had only vehicle audio system, later they were added
standard interfaces and size specifications, it was called as
automotive head-unit(AHU).

The AHU were added with much more features to provide more
information like location, phone sync to user, where the infotainment
(information + entertainment) devices born.

=== Infotainment References
 
  - https://en.wikipedia.org/wiki/Automotive_head_unit

  - https://elearning.renesas.com/pluginfile.php/355/mod_folder/content/0/DevCon_On-the-Road/DevCon_On-the-Road/Automotive/Infotainment_and_Telematics_Solutions_with_Renesas_R-Car.pdf?forcedownload=1
  
  - http://support7.qnx.com/download/download/26204/QNX_CAR_Architecture_Guide.pdf

=== Telematics Devices

This devices when added to the vehicle makes it to be a connected
device, where the vehicle can be monitored and controlled from remote
machine.

=== Telematics References

  - http://www.ti.com/solution/telematics_control_unit?variantid=20402&subsystemid=21708

  - https://www.slideshare.net/embitel1/what-is-telematics-control-unit-tcu

  - https://www.fev.com/fileadmin/user_upload/DGE/Data_Sheets/DGE_TCU_Datasheet.pdf

=== ADAS

* Advanced Driver Assistance Systems the automotive devices which
  helps in improving the driving experience and road safety.

* Some of the features are supported in cluster and some are in
  infotainment.

* ADAS features are listed in
- https://en.wikipedia.org/wiki/Advanced_driver-assistance_systems

=== Autonomous Car

* https://en.wikipedia.org/wiki/Self-driving_car

== Software Architecture for ECUs and Clusters

=== Software Stack

----
                         +-----------+
                         |    App    |
   +------------+        +-----------+ 
   |     App    |        |    OS     |
   +------------+        +-----------+
   |     SBL    |        |    SBL    |
   +------------+        +-----------+  
   |     PBL    |        |    PBL    |
   +------------+        +-----------+
   |     MCU    |        |    MCU    |
   +------------+        +-----------+

----

=== Automotive OS

----                       
                           Complex OS
                         +-----------+
        OS               |    App    |
   +------------+        +-----------+ 
   |   App      |        |  Services |
   +------------+        +-----------+
   | Scheduler  |        | Scheduler |
   +------------+        +-----------+  
   |     HAL    |        |    HAL    |
   +------------+        +-----------+
   |     MCU    |        |    MCU    |
   +------------+        +-----------+

----


=== MCUs for automotive

* They might comply to automotive grade

* They might have automotive communication interfaces like CAN / LIN

* Example V850(Low End)/RH850(High End) from Renesas

* References
  - https://www.renesas.com/in/en/products/microcontrollers-microprocessors/rh850.html

=== Boot-loaders

* Primary Boot-loader (PBL)
  - Non upgradeable
  - Mandatory

* Secondary Boot-loader (SBL)
  - Upgradeable
  - optional

* They should support flash driver and communication interface
  driver(CAN / LIN)

* They should support feature of Reflashing new application and
  booting them.

=== Operating System

* It can be based on Non-OS solution

* Based on General Purpose RTOSes like

  - QNX  (Blackberry)
  - Integrity OS (Greenhills)

* Based on Automotive standard OS

  - Autosar Compliant
    -- Microsar (Vector)

  - OSEK / VDX Compliant

=== Application

* Network communication and diagnostics.

* Power management to handle sleep modes.

* Automotive sensor data and packet processing.

* HMI, Bezel buttons, telltales and beep management in case of
  clusters.

* Image download, verification and reflashing

=== Application Design

The automotive applications may use below different features based on
the complexity of the device
 
* Thread design on RTOS or Asynchronous state-machine design on Non-OS
  systems.

* Message based communication using central message broker.

* Microservices Architecture where separate thread for each
  functionality.

=== Standards in Application Dev

The automotive software development may follow below given standards
for code development.

* Functional Safety (ISO 26262) Specification.
  - Automotive Safety Integrity Level

* MISRA (ISO/TR 15497) is coding guidelines.

=== References

  - https://www.diva-portal.org/smash/get/diva2:580183/FULLTEXT01.pdf

  - https://vector.com/vi_flashbootloader_en.html

  - https://www.embitel.com/flash-bootloader-solutions-for-ecu-reprogramming

  - https://blog.parasoft.com/leveraging-automotive-development-standards-to-mitigate-risk

  - https://en.wikipedia.org/wiki/ISO_26262

  - https://en.wikipedia.org/wiki/Automotive_Safety_Integrity_Level

  - https://en.wikipedia.org/wiki/MISRA_C

  - https://www.embitel.com/blog/embedded-blog/understanding-how-iso-26262-asil-is-determined-for-automotive-applications

== Autosar

=== Autosar Architecture

* An POSIX like specification for Automotive OS

* Layered Architecture where Application works on higher layer and
  MCAL(microcontroler adaptation layer) at the bottom.

* All other OS facilities are provided as APIs and services.

* Software components are developed as callbacks and invoked by
  runtime environment(RTE).

* Most of the components supports RPC kind of interprocess
  communication for message passing.


=== Links

  * https://www.embitel.com/blog/embedded-blog/what-is-autosar-mcal-software-architecture

  * https://www.embitel.com/tag/autosar-development

  * https://retis.sssup.it/sites/default/files/lesson19_autosar.pdf
 
== Automotive Communication Interfaces

=== Automotive Network

* Since there were lots of electronic devices available in the car and
  there is a need for them to communicate between them.

* There came the need for vehicle network or vehicle communication bus
  through which the devices can communicate.

=== Vehicular Busses

* Data Communication Busses

  - CAN (Control Area Network)

  - LIN (Local Area Network)

  - K-Line (ISO 9141-2) - Deprecating

  - VAN (Vehicle Area Network)

  - FlexRay 

* Media Communication Busses

  - MOST (Media Oriented System Transport)

  - Ethernet AVB (Audio Video Bridging)

=== Vehicular Busses References

  - https://en.wikipedia.org/wiki/Vehicle_bus

  - https://www.nxp.com/files-static/training_pdf/20451_BUS_COMM_WBT.pdf

  - https://eng.umd.edu/~austin/enes489p/project-resources/SchmidAutoBusSystems.pdf

  - https://irjet.net/archives/V4/i7/IRJET-V4I7181.pdf

  - http://www.ni.com/white-paper/9733/en/

=== Vehicle Network Usage Profiles

* Vehicle Communication interfaces between ECUs and other devices.

* Diagnostics Interfaces

* Reprogramming Interfaces

* Acquisition and Calibration Interfaces

=== CAN

* CAN became the popular bus interface for data communication between
  devices.

=== CAN Architecture

* Multi Master / slave model

* Asynchronous Serial Communication

* Bidirection and Half Duplex Communication

* Link Layer protocol
  - Frames are broadcasted and segregated based in ID field

  - Flow control and Reliability through special frames 

* Message based communication

* Reference
  - http://www.ti.com/lit/an/sloa101b/sloa101b.pdf

=== Topology

* Line / Bus Topology

* Star Topology (CAN Splitter)

* Ring Topology (Less used)

* Reference
  - http://www.mindsensors.com/content/86-can-and-its-topology

  - https://people.kth.se/~kallej/papers/can_necs_handbook05.pdf

=== CAN Layers

  +---------------+   
  | CAN App       |
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /

=== CAN Sub Layers 

* Application Layer

  - ECU Communication 
  - Diagnostics Applications

* Object Sub-layer

  - Message filtering & Status handling

* Transfer Sub-layer

  - Handles bit timing, framing, arbitration, acknowledgement, error
    detection and signalling.

* Physical Layer

  - Electrical representation of bits.

=== Framing in Link Layer

* Frame Types
  - Data Frames
  - Remote Data Frames
  - Error Frame
  - Overload Frame

* Frame Fields
  - Arbitration Fields
    - Identifier + RTR
  - Control Fields
    - Reserved + DLC
  - Data Fields
  
* References
  - http://esd.cs.ucr.edu/webres/can20.pdf

=== CAN Signalling & Encoding in Physical Layer

* CAN High / CAN Low

  - Differential Signals with resistor termination
 
  - CANH 5V/3.5V and CAN Low 0V/1.5V   - Dominant  - BitValue 0

  - CANH 2.5 V and CAN Low 2.5V        - Reccesive - BitValue 1 


----

  5.0V -----------------------------

               D      R       
  3.5V        ___ 
             /   \   
  2.5V  ____/     \______
            \  0  /   1
  1.5V       \___/   
  
 
 0.0V -----------------------------

----

=== Variants Based on PHY

* Speed
  - High Speed - 40 Kbit/s to 1 Mbit/sec
  - Low Speed  - 40 Kbit/s to 125 Kbits/sec

* Power
  - 5V Transceivers
  - 3V Transceivers

* Bus Termination
  - 120 Ohms End Termination (High Speed)
  - Per Device Termination   (Low Speed)

=== Variants based ON Link Layer

* Scalability
  - 11 bit Message ID
  - 29 bit Message ID

* Frame Type
  - Standard - 11 bit ID
  - Extended - 29 bit ID
  - Clasic   - 0 - 8 Byte Data 
  - FD       - 0 - 64 Byte Data

== CAN Standards and Variants

=== History

* Developed by Robert Bosch published to public as below standards.

* CAN 2.0 A - 11 bit Message ID 

* CAN 2.0 B - 29 bit Message ID

* CAN FD 1.0 - 64 byte data (Flexible Datarate)  

=== ISO  Standards

* ISO 11898 for CAN

* ISO 11898-1 - Data Link Layer 

* ISO 11898-2 - Physical Layer High Speed 

* ISO 11898-3 - Physical Layer Low Speed

=== CAN Stack

  +---------------+   
  | CAN App       |
  +---------------+   
  | CAN Stack     |
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /

=== Class of Stacks 

* DoCAN UDS (ISO 15765-3) - Diagnostics

* KWP2000 (ISO 14230)     - Diagnostics

* UDS (ISO 14229)         - Diagnostics

* ISO TP (ISO 15765-2)    - Network and Transport Layer for CAN

* DoCAN OBD (ISO 15765-4) - External and Remote Diagnostics

* SAE J1939               - Vehicle Network & Diagnostics (Diesel Engine Vehicles)

* CCP & XCP               - CAN based Acquisition and Calibration

* CANopen                 - Embedded Automation

=== Protocol Stacks

* References

  - http://www.can-wiki.info/doku.php?id=can_higher_layer_protocols:main

  - https://www.embitel.com/automotive-insights/library-of-ecu-communication-and-diagnostics-stacks-for-automotive

  - https://www.embitel.com/blog/embedded-blog/kwp-2000-and-uds-protocols-for-vehicle-diagnostics-an-analysis-and-comparison
  
  - http://read.pudn.com/downloads168/doc/comm/774987/kp2000_2.pdf

  - http://read.pudn.com/downloads118/ebook/500929/14230-2.pdf

  - http://www.iosrjournals.org/iosr-jece/papers/Vol.%2010%20Issue%201/Version-1/D010112031.pdf

  - http://www.can-wiki.info/doku.php?id=can_higher_layer_protocols:main

  - https://automotive.softing.com/fileadmin/sof-files/pdf/de/ae/poster/UDS_Faltposter_softing2016.pdf
  
  - https://download.atlantis-press.com/article/25864359/pdf

  - https://www.sti-innsbruck.at/sites/default/files/courses/fileadmin/documents/vn-ws0809/03-vn-CAN-HLP.pdf

=== OnBoard Diagnostics

  - emissions-related on-board diagnostics (OBD) as specified in ISO
    15031,

  - world-wide harmonized on-board diagnostics (WWH-OBD) as specified
    in ISO 27145

  - enhanced vehicle diagnostics (emissions-related system diagnostics
    beyond legislated functionality, non-emissions-related system
    diagnostics),

  - end of life activation on on-board pyrotechnic devices(restraint
    system) (ISO 26021)

=== OBD References

  - https://en.wikipedia.org/wiki/OBD-II_PIDs

  - http://www.ni.com/pdf/manuals/372139d.pdf

=== Generic CAN Stack for Diagnostics

  +---------------+        
  | UDS           |
  +---------------+        
  | DoCAN         |   
 -+---------------+
  | CAN ISO TP    |   
  +---------------+   
  | CAN ISO TP    |     
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /


=== CAN Specific Tools

* CAN Debuggers (Vector)
  - CANalayzer   - One Node Simulation
  - CANoe        - Multi Node Simulation
  - CAPL         - Scripting Language
  - CANape       - Calibration 

* Alternative Tools

  - https://github.com/rbei-etas/busmaster 
  - https://www.gridconnect.com/products/can-usb-adapter-pcan-usb
  - https://www.csselectronics.com/screen/page/dbc-database-can-bus-conversion-wireshark-j1939-example/language/en

=== Automotive Specific Tools

* Static Analysis & Misra Compliance
  - Coverity

* Unit Testing
  - Vectorcast

* JTAG Debugger
  - Lauterbach

=== Opensource CAN Devices & Stacks

* SocketCAN in Linux 
  - RAW, BCM, ISOTP & SAEJ1939

* Openxc - Opensource OBD-II platform with ISOTP and UDS protocol
  implementation

* Reference 

  - https://elinux.org/index.php?title=CAN_Bus
  - https://elinux.org/Can-utils
  - https://github.com/GENIVI/CANdevStudio
  - https://github.com/openxc

* 