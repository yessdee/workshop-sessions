= Vehicle Network

== Automotive Communication Interfaces

=== Automotive Network

* Since there were lots of electronic devices available in the car and
  there is a need for them to communicate between them.

* There came the need for vehicle network or vehicle communication bus
  through which the devices can communicate.

=== Vehicular Busses

* Data Communication Busses

  - CAN (Control Area Network)

  - LIN (Local Interconnect Network)

  - K-Line (ISO 9141-2) - Deprecating

  - VAN (Vehicle Area Network)

  - FlexRay 

* Media Communication Busses

  - MOST (Media Oriented System Transport)

  - Ethernet AVB (Audio Video Bridging)

=== Vehicular Busses References

  - https://en.wikipedia.org/wiki/Vehicle_bus

  - https://www.nxp.com/files-static/training_pdf/20451_BUS_COMM_WBT.pdf

  - https://eng.umd.edu/~austin/enes489p/project-resources/SchmidAutoBusSystems.pdf

  - https://irjet.net/archives/V4/i7/IRJET-V4I7181.pdf

  - http://www.ni.com/white-paper/9733/en/

=== Vehicle Network Usage Profiles

* Vehicle Communication interfaces between ECUs and other devices.

* Diagnostics Interfaces

* Reprogramming Interfaces

* Acquisition and Calibration Interfaces

=== CAN

* CAN became the popular bus interface for data communication between
  devices.

=== CAN Architecture

* Multi Master / slave model

* Asynchronous Serial Communication

* Bidirection and Half Duplex Communication

* Link Layer protocol
  - Frames are broadcasted and segregated based in ID field

  - Flow control and Reliability through special frames 

* Message based communication

* Reference
  - http://www.ti.com/lit/an/sloa101b/sloa101b.pdf

=== Topology

* Line / Bus Topology

* Star Topology (CAN Splitter)

* Ring Topology (Less used)

* Reference
  - http://www.mindsensors.com/content/86-can-and-its-topology

  - https://people.kth.se/~kallej/papers/can_necs_handbook05.pdf

=== CAN Layers

  +---------------+   
  | CAN App       |
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /

=== CAN Sub Layers 

* Application Layer

  - ECU Communication 
  - Diagnostics Applications

* Object Sub-layer

  - Message filtering & Status handling

* Transfer Sub-layer

  - Handles bit timing, framing, arbitration, acknowledgement, error
    detection and signalling.

* Physical Layer

  - Electrical representation of bits.

=== Framing in Link Layer

* Frame Types
  - Data Frames
  - Remote Data Frames
  - Error Frame
  - Overload Frame

* Frame Fields
  - Arbitration Fields
    - Identifier + RTR
  - Control Fields
    - Reserved + DLC
  - Data Fields
  
* References
  - http://esd.cs.ucr.edu/webres/can20.pdf

=== CAN Signalling & Encoding in Physical Layer

* CAN High / CAN Low

  - Differential Signals with resistor termination
 
  - CANH 5V/3.5V and CAN Low 0V/1.5V   - Dominant  - BitValue 0

  - CANH 2.5 V and CAN Low 2.5V        - Reccesive - BitValue 1 


----

  5.0V -----------------------------

               D      R       
  3.5V        ___ 
             /   \   
  2.5V  ____/     \______
            \  0  /   1
  1.5V       \___/   
  
 
 0.0V -----------------------------

----

=== Variants Based on PHY

* Speed
  - High Speed - 40 Kbit/s to 1 Mbit/sec
  - Low Speed  - 40 Kbit/s to 125 Kbits/sec

* Power
  - 5V Transceivers
  - 3V Transceivers

* Bus Termination
  - 120 Ohms End Termination (High Speed)
  - Per Device Termination   (Low Speed)

=== Variants based ON Link Layer

* Scalability
  - 11 bit Message ID
  - 29 bit Message ID

* Frame Type
  - Standard - 11 bit ID
  - Extended - 29 bit ID
  - Clasic   - 0 - 8 Byte Data 
  - FD       - 0 - 64 Byte Data

== CAN Standards and Variants

=== History

* Developed by Robert Bosch published to public as below standards.

* CAN 2.0 A - 11 bit Message ID 

* CAN 2.0 B - 29 bit Message ID

* CAN FD 1.0 - 64 byte data (Flexible Datarate)  

=== ISO  Standards

* ISO 11898 for CAN

* ISO 11898-1 - Data Link Layer 

* ISO 11898-2 - Physical Layer High Speed 

* ISO 11898-3 - Physical Layer Low Speed

=== CAN Stack

  +---------------+   
  | CAN App       |
  +---------------+   
  | CAN Stack     |
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /

=== Class of Stacks 

* DoCAN UDS (ISO 15765-3) - Diagnostics

* KWP2000 (ISO 14230)     - Diagnostics

* UDS (ISO 14229)         - Diagnostics

* ISO TP (ISO 15765-2)    - Network and Transport Layer for CAN

* DoCAN OBD (ISO 15765-4) - External and Remote Diagnostics

* SAE J1939               - Vehicle Network & Diagnostics (Diesel Engine Vehicles)

* CCP & XCP               - CAN based Acquisition and Calibration

* CANopen                 - Embedded Automation

=== Protocol Stacks

* References

  - http://www.can-wiki.info/doku.php?id=can_higher_layer_protocols:main

  - https://www.embitel.com/automotive-insights/library-of-ecu-communication-and-diagnostics-stacks-for-automotive

  - https://www.embitel.com/blog/embedded-blog/kwp-2000-and-uds-protocols-for-vehicle-diagnostics-an-analysis-and-comparison
  
  - http://read.pudn.com/downloads168/doc/comm/774987/kp2000_2.pdf

  - http://www.iosrjournals.org/iosr-jece/papers/Vol.%2010%20Issue%201/Version-1/D010112031.pdf

  - http://www.can-wiki.info/doku.php?id=can_higher_layer_protocols:main
  
  - https://download.atlantis-press.com/article/25864359/pdf

  - https://www.sti-innsbruck.at/sites/default/files/courses/fileadmin/documents/vn-ws0809/03-vn-CAN-HLP.pdf

=== UDS

* Unified Diagnostic Servicces

* Successor KWP2000

* Supports Messages and Sequences to get diagnostics information of
  the vehicle.

=== UDS Function Groups

* Diagnostics and Communication

* Data Transmission
  - R/W Data Identifier (DID)

* Stored Data Transmission
  - Diagnostic Trouble Codes (DTC)

* Input / Output Control

* Remote Activation Routine

* Upload / Download
  - NVM Update
  - Firmware Update

=== UDS

* References

  - http://read.pudn.com/downloads118/ebook/500929/14230-2.pdf

  - https://www.embitel.com/blog/embedded-blog/4-uds-protocol-services-every-automotive-geek-should-know

  - https://automotive.softing.com/fileadmin/sof-files/pdf/de/ae/poster/UDS_Faltposter_softing2016.pdf

=== OnBoard Diagnostics

  - emissions-related on-board diagnostics (OBD) as specified in ISO
    15031,

  - world-wide harmonized on-board diagnostics (WWH-OBD) as specified
    in ISO 27145

  - enhanced vehicle diagnostics (emissions-related system diagnostics
    beyond legislated functionality, non-emissions-related system
    diagnostics),

  - end of life activation on on-board pyrotechnic devices(restraint
    system) (ISO 26021)


=== OBD References

  - https://en.wikipedia.org/wiki/OBD-II_PIDs

  - http://www.ni.com/pdf/manuals/372139d.pdf

=== UDS vs OBD

* OBD more related to emission and UDS used even of non-emission.

* OBD is for on-board, UDS of off-board at production or service.

* OBD IDs are fixed by standard, UDS they are defined by OEMs.






=== Protocol Sequence

Diag App --- Hash                       -----> ECU
Diag App <---                       Key------- ECU

Diag App --- Diagnostic session Control -----> ECU

Diag App --- Read Data by Identifier    -----> ECU

Diag App <-- Response                   ------ ECU


=== Generic CAN Stack for Diagnostics

  +---------------+        
  | UDS           |
  +---------------+        
  | DoCAN         |   
 -+---------------+
  | CAN ISO TP    |   
  +---------------+   
  | CAN ISO TP    |     
  +---------------+ \      
  | CAN Data Link |  |     
  +---------------+  | 	   CAN      
  | CAN PHY       |  |	   Hardware Module
  +---------------+ /

=== ISO TP

* Links
  - https://github.com/altelch/iso-tp
  - https://github.com/openxc/isotp-c

=== CAN Specific Tools

* CAN Debuggers (Vector)
  - CANalayzer   - One Node Simulation
  - CANoe        - Multi Node Simulation
  - CAPL         - Scripting Language
  - CANape       - Calibration 
  - Candb++      - DBC file editor (All ECU Can Messages/ Signals)

* Diag Tools (Vector)
  - ODXStudio, Candelastudio
  - https://assets.vector.com/cms/_processed_/c/a/csm_candelastudio_vmodel_e_1e60d37fb8.png

* Alternative Tools

  - https://github.com/rbei-etas/busmaster 
  - https://www.gridconnect.com/products/can-usb-adapter-pcan-usb
  - https://www.csselectronics.com/screen/page/dbc-database-can-bus-conversion-wireshark-j1939-example/language/en

=== Opensource CAN Devices & Stacks

* SocketCAN in Linux 
  - RAW, BCM, ISOTP & SAEJ1939

* Openxc - Opensource OBD-II platform with ISOTP and UDS protocol
  implementation

* Reference 

  - https://elinux.org/index.php?title=CAN_Bus
  - https://elinux.org/Can-utils
  - https://github.com/GENIVI/CANdevStudio
  - https://github.com/openxc

* 
